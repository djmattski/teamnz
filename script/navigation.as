package script {		import com.greensock.*;	import com.greensock.easing.*;		import flash.display.DisplayObject;	import flash.display.MovieClip;	import flash.display.Sprite;	import flash.events.MouseEvent;	import flash.geom.Matrix;	import flash.utils.getDefinitionByName;		import script.model.Model;		public class navigation extends MovieClip	{			private var currSecName:String;		private var navAltered:Boolean;		private var my_dispatch:customDispatcher;		public var navYDelta:int;				public function navigation() {			// constructor code						var navElements:Array = [				teamLinkText,				teamLinkNum,				historyLinkText,				historyLinkNum,				boatsLinkText,				boatsLinkNum,				sponsorsLinkText,				sponsorsLinkNum,				pradaLinkText,				pradaLinkNum,				sanFranLinkText,				sanFranLinkNum,				volvoLinkText,				volvoLinkNum,				resourcesLinkText,				resourcesLinkNum			];						navAltered = false;			navYDelta = 0;			currSecName = 'home';						/**			* Add each nav item comprised of three parts:			* 1. The visible shape that will tween			* 2. The text mc			* 3. The cover that tweens with the shape - this is used for all mouse events.			*/						var section:Object;			var id:String;						var link:MovieClip;			var linkText:MovieClip;			var linkNum:MovieClip;			var linkCover:MovieClip;						var LinkClass:Class;						var xPos:int = 0;						for (var i:int = 0; i<Model.NAVIGATION.length; i++) {				id = Model.NAVIGATION[i];				section = Model.SECTIONS[id];								link = new MovieClip();				link.name = id + 'Link';				link.alpha = 0;				link.x = xPos;				link.graphics.lineStyle(0, 0x000000, 0);				link.graphics.beginFill(section.color, 1);				link.graphics.drawRect(0, 0, 118, 44);				link.graphics.endFill();				link.rotation = 8;				skewer(link, -3.8, -3.8);				addChild(link);								LinkClass = getDefinitionByName(id + 'LinkText') as Class;				linkText = new LinkClass();				linkText.name = id + 'LinkTxt';				linkText.alpha = 0;				linkText.x = link.x + section.nav.textOffsetX;				linkText.y = link.y + section.nav.textOffsetY;				linkText.mouseEnabled = false;				linkText.visible = false;				addChild(linkText);								LinkClass = getDefinitionByName(id + 'LinkNum') as Class;				linkNum = new LinkClass();				linkNum.name = id + 'LinkNum';				linkNum.x = link.x + link.width - 46;				linkNum.y = link.y + 18;				linkNum.alpha = 0;				linkNum.mouseEnabled = false;				addChild(linkNum);								linkCover = new MovieClip();				linkCover.name = id;				linkCover.x = xPos;				linkCover.y = 0;				linkCover.graphics.lineStyle(0, 0x000000, 0);				linkCover.graphics.beginFill(0x788989, 1);				linkCover.graphics.drawRect(0, 0, 118, 44);				linkCover.graphics.endFill();				linkCover.rotation = 8;				linkCover.alpha = 0;				skewer(linkCover, -3.8, -3.8);				linkCover.addEventListener(MouseEvent.ROLL_OVER, dropDown);				linkCover.addEventListener(MouseEvent.MOUSE_DOWN, buttonClicked);				addChild(linkCover);								xPos += link.width - 3;			}		}				private function buttonClicked(e:MouseEvent):void		{			e.stopImmediatePropagation();						var id:String = e.target.name;						var mainApp = (parent as appBase);						if(currSecName == 'home') {				var homePage = mainApp.getChildByName('home') as Sprite;				TweenLite.to(homePage, 1, { alpha:0, onComplete:function() {					(parent as appBase).removeChild(homePage);					loadSection(id);				}});								//Alter the nav				var thisY = this.y;				navYDelta = 20;				TweenLite.to(this, 1, { y:thisY - navYDelta });				navAltered = true;			} else {				var thePage = mainApp.mainContainer.getChildByName(currSecName) as Sprite;				my_dispatch = new customDispatcher('finished');				my_dispatch.addEventListener(my_dispatch.ACTION, function() {					loadSection(id);					mainApp.mainContainer.removeChild(thePage);				});				thePage.flyout(my_dispatch);			}		}				//Private functions		// _x and _y are the skew in degrees		private function skewer(target:DisplayObject, _x:Number, _y:Number):void		{			var mtx:Matrix = new Matrix();			mtx.b = _y * Math.PI/180;			mtx.c = _x * Math.PI/180;			mtx.concat(target.transform.matrix);			target.transform.matrix = mtx;		}				private function dropDown(e:MouseEvent):void		{			e.target.removeEventListener(MouseEvent.ROLL_OVER, dropDown);			e.target.addEventListener(MouseEvent.ROLL_OUT,retract);						if(navAltered){				e.target.alpha = 0;			}						var theText:MovieClip;			theText = e.target.parent.getChildByName(e.target.name+'LinkTxt') as MovieClip;			theText.visible = true;			TweenLite.to(theText,0.5,{alpha:1, delay:0.3});						var shape:MovieClip;			shape = e.target.parent.getChildByName(e.target.name+'Link') as MovieClip;			var theHeight = (parent as appBase).theStage.stageHeight;			theHeight += 500;			TweenLite.to([e.target,shape], 0.3, {height:theHeight, width:126.95, ease:Sine.easeIn, onComplete:function(){				//trace(e.target.width);			}});					}				private function retract(e:MouseEvent):void		{			e.target.removeEventListener(MouseEvent.ROLL_OUT,retract);						var theText:MovieClip;			theText = e.target.parent.getChildByName(e.target.name+'LinkTxt') as MovieClip;			TweenLite.killTweensOf(theText);			theText.alpha = 0;			theText.visible = false;						var shape:MovieClip;			shape = e.target.parent.getChildByName(e.target.name+'Link') as MovieClip;			TweenLite.fromTo([e.target,shape], 0.5, {height:710, width:23}, {height:51.85, width:126.95, onComplete:function(){				e.target.addEventListener(MouseEvent.ROLL_OVER, dropDown);				if(navAltered){					//Not current section					var pattern:RegExp = new RegExp(currSecName, "i");					var result:Object = pattern.exec(e.target.name);					if(result == null) {						e.target.alpha = 1;					}				}			}});		}				private function loadSection(sectionToLoad:String):void		{			if (currSecName == 'home') {				var id:String;				var cover:MovieClip;								for (var i:int = 0; i<Model.NAVIGATION.length; i++) {					id = Model.NAVIGATION[i];										cover = getChildByName(id) as MovieClip;					cover.alpha = 1;				}			} else {								var currCover:MovieClip = this.getChildByName(currSecName) as MovieClip;				currCover.alpha = 1;			}						var newCover:MovieClip = this.getChildByName(sectionToLoad) as MovieClip;			newCover.alpha = 0;						//Instantiate new section			var mainApp = (parent as appBase);			var SectionClassName:String = Model.SECTIONS[sectionToLoad].className;						if (SectionClassName) {				var SectionClass:Class = getDefinitionByName('script.' + SectionClassName) as Class;				var section:Sprite = new SectionClass(mainApp);				section.name = sectionToLoad;				mainApp.mainContainer.addChild(section);				currSecName = sectionToLoad;			}		}				public function shaBang():void		{			//Fade in all nav items						var link:MovieClip;			var linkNum:MovieClip;			var id:String;						for (var i:int = 0; i<Model.NAVIGATION.length; i++) {				id = Model.NAVIGATION[i];								link = getChildByName(id + 'Link') as MovieClip;				linkNum = getChildByName(id + 'LinkNum') as MovieClip;								TweenLite.to([link, linkNum], 0.5, {alpha:1, ease:Sine.easeIn, delay:i * 0.1});			}		}	}}